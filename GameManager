
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.UI;

public class GameManager : MonoBehaviour
{
    // メンバの宣言にもルールがあります。
    // const -> public -> privateの順番で定義します。
    // また不要な改行は可読性を下げることに繋がります。避けましょう。
    // また全ての変数には、必ずprivate or publicをつけましょう。
    // privateとpublicは、privateにできるならば必ずprivateにしましょう。
    // そうすることでメモリの節約やコードの単純化、可読性の向上に繋がります。
    // 例えば、countTimeはprivate、goButtonなどはprivateにできそうです。
    // privateにしながら、inspectorに出すこともできます。↓のようにします。
    // [SerializeField] private GameObject goButton;

    public int StageNo;
    public bool IsBallMoving;   // publicは大文字始まり。
    public GameObject ballPrefab;
    public GameObject ball;
    public GameObject Dark;
    public GameObject goButton;
    public GameObject retryButton;
    public GameObject darkButton;
    public GameObject clearText;
    public AudioClip clearSE;
    public AudioClip impactSE;
    
    private AudioSource audioSource;
    //時間記録のあたり
    private float countTime = 0;
    //重力調整のあたり
    private Slider gravitySlider; // 適当にprivateを入れてしまいましたが、ひょっとしたら[SerializeField] privateのほうがいいかも？

    // Start is called before the first frame update
    void Start()
    {
        retryButton.SetActive(false);
        isBallMoving = false;
        audioSource = gameObject.GetComponent<AudioSource>();

        //重力調整の設定
        gravitySlider = GetComponent<Slider>();
    }

    // Update is called once per frame
    void Update()
    {
        countTime += Time.deltaTime;
    }

    public void PushGoButton()
    {
        Rigidbody2D rd = ball.GetComponent<Rigidbody2D>();
        rd.isKinematic = false;
        retryButton.SetActive(true);
        goButton.SetActive(false);
        isBallMoving = true;
    }

    public void PushRetryButton()
    {
        Destroy(ball);
        ball = (GameObject)Instantiate(ballPrefab);
        retryButton.SetActive(false);
        goButton.SetActive(true);
        isBallMoving = false;
    }

    public void PushBackButton()
    {
        GobackStageSelect();
    }

    //ダークボタン
    public void PushDarkButton()
    {
        Dark.SetActive(!Dark.activeSelf);
    }

    // コメントをつけることは非常に良い習慣です。続けていきましょう。
    // しかし、全てのメソッドにコメントがついていたらどうなるでしょうか。コードはコメントだらけて可読性がかえって下がってしまいます。
    // コメントを入れか入れないかの基準ですが、「そのコードを読んで、理解できるかどうか」で決めるとよいでしょう。
    // 例えば「PushGravityButton」というメソッドですが、非常に良いわかりやすいメソッド名です。ひと目見ただけで、「グラビティボタンを押したら動作するんだ」ということがわかります。
    // ですので、ここにはコメントはいらない、ということになります。
    // コメントは例えばマジックナンバーなどに使うとよいでしょう。ひと目見ても絶対意味がわからないので。
    // （極論、最強にわかりやすいコードをかけるプログラマーは一行もコメントを入れる必要がない、とも言えるかもしれません。）
    // （これは読み手にも関わることですので、どんな相手が読むのか？未来の自分か、それとも受け継いだ後輩か？を意識するのは大切かもしれません。）
    
    //グラビティボタン
    public void PushGravityButton()
    {
        ConstantForce2D cf= ball.GetComponent<ConstantForce2D>();
        cf.enabled = !cf.enabled;
    }

    // できるだけメソッド名は動詞始まりにします。
    // 例外として、Onから始まるメソッドなども存在します。(OnButtonClickedなど)
    public void StageClear()
    {
        audioSource.PlayOneShot(clearSE);
        clearText.SetActive(true);
        Text t = GameObject.Find("CanvasUI").transform.Find("ClearText").GetComponent<Text>();
        t.text = "CLEAR!\n" + countTime.ToString();
        retryButton.SetActive(false);
        if (PlayerPrefs.GetInt("CLEAR", 0) < StageNo)
        {
            PlayerPrefs.SetInt("CLEAR", StageNo);
        }
        Invoke("GobackStageSelect", 3.0f);
    }

    void GobackStageSelect()
    {
        SceneManager.LoadScene("StageSelectScene");
    }

    // メソッドは頭文字を大文字にしましょう。C#さんが決めたルールです笑
    
    //ボールと箱が衝突したとき
    public void impact()
    {
        audioSource.PlayOneShot(impactSE);
    }
}
